# -*- coding: utf-8 -*-
"""ML_project_template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KZ5tNfeE1SasiraRf1f83ntToEF83HZZ
"""

####################################################
#author: LÃ©on Glorieux
####################################################

#Setup for the colab
# Code to read csv file into Colaboratory:
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# get the data in my drive 
downloaded = drive.CreateFile({'id':'1yPG4EyJrc-kSwRP5CxzO6NaDqt4DeGRO'}) 
downloaded.GetContentFile('tartu-object-detection.zip')
!unzip tartu-object-detection.zip

#input your API from kaggle:
# 1    Click on your profile icon
# 2    Go to Account
# 3    In API you press Create new API token
from google.colab import files

#set kaggle for this notebook
files.upload(); # upload your kaggle.json file
import json
!mkdir /root/.kaggle/
!mv kaggle.json /root/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json
!kaggle config set -n path -v{/content}

#set up all the definitions
import numpy as np 
import pandas as pd
from keras_preprocessing import image
import re
import matplotlib.pyplot as plt 

# retrieve train and test datasets
train =  pd.read_csv('train.csv') 
test = pd.read_csv('test.csv')
labels = pd.read_csv('labels.csv')

# empty table to fill with the information on the labels
label = []
for i in range(0, len(labels)):
    label.append(str(labels['object'][i])) 
def create_empty_table(bool):
  if bool == True:
    table = np.zeros((len(test), len(labels)))
    table = pd.DataFrame(data=table, columns= [label], index = [test.index]).astype(int)
  else:
    table = np.zeros((len(train), len(labels)))
    table = pd.DataFrame(data=table, columns= [label], index = [train.index]).astype(int)
    table.drop(axis = 0,index=range(197,205), inplace = True)
  return table

img_dir = '/content/images/images'

# as some images don't exist in the img folder, we drop them
train_drop = train.drop([85,93,94,100,143,52,81,166]) 
test_drop = test.drop([60,61])
train_img = []
test_img = []

#get the images in a list
# for train
for i in range(len(train_drop)):
  img = image.load_img(img_dir + '/' + train_drop['image_id'].iloc[i], target_size=(400,400,3))
  img = image.img_to_array(img)
  img = img/255.
  train_img.append(img)

# for test
for i in range(len(test_drop)):
  img = image.load_img(img_dir + '/' + test_drop['image_id'].iloc[i], target_size=(400,400,3))
  img = image.img_to_array(img)
  img = img/255.
  test_img.append(img)

#get the train labels in a list, as integers
train_labels = train['labels']
train_labels = train_labels.drop([85,93,94,100,143,52,81,166])
train_labels = train_labels.str.split()
train_labels = train_labels.tolist()

y = []
for i in range(len(train_labels)):
  x = []
  for j in range(len(train_labels[i])):
    x.append(re.sub('\D', '', train_labels[i][j]))
  x_int = [eval(k) for k in x]
  y.append(x_int)
train_label_list = y

#fit the labels in the table from list of labels image by image
def fit_labeled_image_in_table(label_list):
  label_table = create_empty_table(False)
  for i in range(197):
    new_row = np.zeros(len(labels))
    for j in label_list[i]:
      new_row[j] = 1
    label_table.loc[i] = new_row
  return label_table
label_table = fit_labeled_image_in_table(train_label_list)
# label_table.drop(axis = 0,index=range(197,205))

# function to get the dataframe column in a list
def df_col_to_list(df,i):
  df_col = df.iloc[:, i]
  df_col = df_col.tolist()
  return(df_col)

#fit the label in the table from list of one label with all images (binary)
def fit_label_in_table(label_images_list, column,table):
  table.loc[:,label[column]] = label_images_list
  return table

#prediction with the same label on multiple patterns
def single_label_training(prediction_matrix, repetitions,label):
  prediction_tab = create_empty_table(False)
  for i in range(repetitions):
    prediction_table = fit_label_in_table(prediction_matrix[i],i,prediction_tab)
    # prediction_table.drop(axis = 0,index=range(197,205))
  return prediction_table


# turn prediction to df to assess it
def table_for_predictions(prediction_matrix, initial_column,bool):
  prediction_table = create_empty_table(bool)
  j = 0
  for i in initial_column:
    # prediction_label_img_list = df_col_to_list(label_table,i)
    prediction_table = fit_label_in_table(prediction_matrix[j],i,prediction_table)
    # prediction_table.drop(axis = 0,index=range(197,205))
    j +=1
  return prediction_table

#get the score of each label
def score_all_labels(label_table,prediction_table, initial_column):
  # accuracy_label_table = label_table.drop(axis = 0,index=range(197,205))
  # accurcay_prediction_table = prediction_table.drop(axis = 0,index=range(197,205))
  label_accuracy = []
  for i in initial_column: #if you want all labels, make in range(len(label))
    x = df_col_to_list(label_table,i)
    y = df_col_to_list(prediction_table,i)
    n_correct = 0
    for j in range(len(x)):
      n_correct += np.sum(x[j] == y[j])
    label_accuracy.append(n_correct / len(x))
  return label_accuracy

def score_one_label(label_table,prediction_table, repetitions,your_label):
  # accuracy_label_table = label_table.drop(axis = 0,index=range(197,205))
  # accurcay_prediction_table = prediction_table.drop(axis = 0,index=range(197,205))
  label_accuracy = []
  for i in range(repetitions):
    x = df_col_to_list(label_table,your_label)
    y = df_col_to_list(prediction_table,i)
    n_correct = 0
    for j in range(len(x)):
      n_correct += np.sum(x[j] == y[j])
    label_accuracy.append(n_correct / len(x))
  return label_accuracy

# transform the prediction matrix number of label * total amount of images
def test_prediction_to_submission(test_prediction_matrix):
  test_table = table_for_predictions(test_prediction_matrix, 0,True)
  lbl_lst = []
  for i in range(len(test_prediction_matrix[0])):
    img_label = []
    for j in range(len(label)):
      if test_table.iloc[i, j] == 1:
        img_label.append(j)
    lbl_lst.append(img_label)

  test_labels = []
  for i in range(len(lbl_lst)):
    img_labels = ""
    for j in lbl_lst[i]:
      img_labels = img_labels + "l" + str(j) + " "
    img_labels = [img_labels]
    test_labels.append(img_labels)

  solution = pd.DataFrame({'image_id': test['image_id'], 'labels': test_labels})
  solution['labels']= solution['labels'].str[0]
  return solution

def makeplot(initial_label, accuracy,bool):
  plot_x = []
  if bool:
    for i in range(initial_label):
      plot_x.append(i)
  else:
    plot_x = initial_label
  plt.ylabel("Accuracy")
  plt.xlabel("label number")
  plt.plot(plot_x, accuracy, marker='o', linestyle='-', color='r', label='Square') 
  plt.xticks(plot_x, plot_x)
  plt.show

def img_plot(img):
  plt.imshow(train_img[img], plt.get_cmap('gray'));
  plt.axis('off')
  plt.show()

def print_img_with_label(prediction_table, your_label):
  for i in range(len(prediction_table)):
    x = df_col_to_list(label_table,your_label[i])
    y = prediction_table[i]
    for j in range(len(x)):
      if x[j] != y[j]:
        if x[j] == 0:
          print("false positive (val is 0, but predicted as 1)")
        if x[j] == 1:
          print("false negative (val is 1, but predicted as 0)")
        print(f"label is {label[your_label[i]]}")
        img_plot(j)

# test the results on the train
# Here, we look for each label how it corresponds to the actual train value given by kaggle. That way we know what are the labels we findthe best, and know where to focus on 

#Exemple
####
# prediction_test0 = df_col_to_list(label_table,5)
# prediction_test1 = df_col_to_list(label_table,11)
# prediction_test2 = df_col_to_list(label_table,15)
# prediction_matrix = [prediction_test0, prediction_test1,prediction_test2]
# train_prediction = prediction_matrix
# your_label = [0,11,15]
#####

#Your input
######################################################################################################################################
train_prediction = ...     ## global list: each element is a label.  inner list: each element is the presence of this label or not in the image (1 or 0) size is number of label you visit (len(initial_label))*
your_label = ...        ## labels you try in a list. if you want labels following themselves: range(initial,final) or range(len(label))
######################################################################################################################################

prediction_df = table_for_predictions(train_prediction, your_label, False )
accuracy = score_all_labels(label_table,prediction_df, your_label)
print(accuracy)
makeplot(your_label,accuracy,False)

# test results on a single label with multiple occurence (or not)
#Exemple
####
# prediction_test0 = df_col_to_list(label_table,91)
# prediction_test1 = df_col_to_list(label_table,2)
# prediction_test2 = df_col_to_list(label_table,0)
# prediction_matrix = [prediction_test0, prediction_test1,prediction_test2,prediction_test0]
# train_prediction = prediction_matrix
# your_label = 2
####

#Your input
######################################################################################################################################
train_prediction = ...              # size: x number of test * 197 (images) (prediction is 1 or 0 for presence or absence of label)
your_label = ...                    # label you are testing
######################################################################################################################################

repetitions = len(train_prediction)
single_label_df = single_label_training(train_prediction,repetitions ,your_label)
accuracy = score_one_label(label_table,single_label_df, repetitions,your_label)
print(accuracy)
makeplot(repetitions,accuracy, True)

print_img_with_label(prediction_matrix,your_label)

# submit a solution to kaggle
#Your input
######################################################################################################################################
test_prediction =...                  ## matrix of your prediction 92 label * 88 images with 1 and 0 for presence or absence of label
######################################################################################################################################
submission = test_prediction_to_submission(test_prediction)                                                 ## transform the list to CSV
submission.to_csv('sample_submission.csv', index = False)                                                   ## transform to csv
!kaggle competitions submit -c tartu-object-detection -f sample_submission.csv -m "Sample submission test"  ## submit to kaggle